#!/bin/bash
### Replacement script for GNU Stow to manage dotfiles.
#   *****  IN PROGRESS  ***** 
#   If you run this right now, it'll overwrite all of your dotfiles.
#
#   TODO: Create an isolated environment for testing.
#
# Feature TODOs:
# TODO: Check for user flags. 
#   -f, --force : then force overwrite any existing files.
#   -s, --skip-existing : skip any existing files.
#   -r, --remove : remove any existing files.
#   -v, --verbose : print verbose output.
# TODO: Add verbosity levels
# TODO: Write to a file to remember which files were managed by this script.


declare SKIP
declare FORCE      #    
declare BACKUP     # Use `ln -b` when creating symlinks
# Debug Output - create FIFO pipe and print to that, if true attach that fifo to stdout
declare VERBOSE    

while [[ -n $1 ]]; do
    case $1 in
        -h|--help)
            printf "TODO: Add help documentation.\n"
            shift;
            ;;
        -f|--force)
            printf "Forcing symlinks.\n"
            FORCE=true
            ;;
        -b|--backup)
            printf "Backups will be made for all existing files.\n"
            BACKUP=true
            ;;
        -s|--skip)
            printf "Skipping files that already exist (no forced overwrite)\n"
            SKIP=true
            ;;
        -v|--verbose)
            printf "Using verbose output.\n"
            VERBOSE=true
            ;;
        *)
            printf "Unknown argument: %s\n" "$1"
            shift;
            ;;
    esac
done


# Check if the terminal supports 256 colors.
case "$TERM" in
    (*256*)
        BLUE=$'\e[38;5;33m';
        LAVENDER=$'\e[38;5;99m';
        RED=$'\e[38;5;196m';
        GREEN=$'\e[38;5;82m';
        ;;
    (*)
        BLUE=$'\e[34m';
        LAVENDER=$'\e[35m';
        RED=$'\e[31m';
        GREEN=$'\e[32m';
        ;;
esac
RESET=$'\e[0m';



declare -a MANAGED_FILES

if [[ -f /tmp/FILES ]]; then
    declare -a SAVED_MANAGED_FILES
    IFS=$'\n' read -r -d '' -a SAVED_MANAGED_FILES < /tmp/FILES
    for f in "${SAVED_MANAGED_FILES[@]}"; do
        printf "%s[Managed file]: %s\n" "${GREEN}" "${RESET}$f"
    done
fi

# TODO: Use an associative array to determine which file is managed
#      e.g., [$file]=true
#      Gather file names when 
file_is_managed() {
    printf "Debug: Checking if file is managed: %s\n" "$1"
    if [[ ${#MANAGED_FILES[@]} -eq 0 ]] && [[ ${#SAVED_MANAGED_FILES} -eq 0 ]]; then
        printf "%sNo managed files were found.%s\n" "${RED}" "${RESET}"
        return 1
    fi
    for f in "${SAVED_MANAGED_FILES[@]}"; do
        if [[ "$f" == "$1" ]]; then
            printf "Debug: File found in MANAGED_FILES: %s\n" "${GREEN}$1${RESET}"
            return 0
        fi
    done
    for f in "${MANAGED_FILES[@]}"; do
        if [[ "$f" == "$1" ]]; then
            printf "Debug: File found in MANAGED_FILES: %s\n" "${GREEN}$1${RESET}"
            return 0
        fi
    done
    printf "Debug: File NOT found in MANAGED_FILES: %s\n" "${RED}$1${RESET}"
    return 1
}

declare -a DIRS
IFS=$'\n' read -r -d '' -a DIRS < <(
    find ~/.dotfiles/ -mindepth 1 -maxdepth 1 -type d ! -name '.git')


for d in "${DIRS[@]}"; do
    declare -a FILES
    IFS=$'\n' read -r -d '' -a FILES < <(find "$d" -mindepth 1 -type f)
    for f in "${FILES[@]}"; do

        ### POSIX-compliant way to remove the leading path for final_destination ###
        # TODO: Accomodate dotfiles directories with different names (e.g., dot)
        DOTFILES_DIR=$(basename "${PWD}")

        final_destination=$(printf "%s" "$f" | sed -E "s/.dotfiles\/$(basename "$d")\///")

        ### Using Parameter Expansion (Bash 4.0+) ###
        # final_destination="${f//".dotfiles/$(basename "$d")/"/}"
        printf "FILE:              %s\n" "${BLUE}${f}${RESET}"
        printf "FINAL DESTINATION: %s\n" "${LAVENDER}${final_destination}${RESET}"

        if [[ ! -d "$(dirname "$final_destination")" ]]; then
            if ! mkdir -p "$(dirname "$final_destination")"; then
                printf "\e[38;5;196mFailed to create directory: Directory doesn't exist\e[0m: %s \n" "$(dirname "$final_destination")"
            fi
        fi


        ### TODO:
        ### Logic for Handling Files / Symlinks ###
        # * Something is breaking here. 
        # * I think it's got somthing to do with lynx/.config/lynx/lynx.lss
        #     * It seems to be getting stuck on that file and symlinking all the files to it.

        # If file exists and is managed, update it.
        if [[ -f "$final_destination" ]] && file_is_managed "$final_destination"; then
            printf "%sManaged file being updated\e[0m: %s\n" "${GREEN}" "$final_destination"
            if ! ln -sf "$f" "$final_destination"; then
                printf "%sFailed to create symlink for %s: \e[0m: %s\n" \
                    "${RED}" "$(basename "$f")" "$final_destination"
            else
                MANAGED_FILES+=("$final_destination")
            fi
        # If file exists, but isn't managed, skip it.
        elif [[ -f "$final_destination" ]] && ! file_is_managed "$final_destination"; then
            printf "%sFile already exists: %s \n\t%s\
                \nDelete file to manage it.\n" \
                "${RED}" "${RESET}${final_destination}" \
                "${BLUE}$(file "$final_destination")${RESET}"
        # If file doesn't exist, link it.
        elif [[ ! -f "$final_destination" ]]; then  #  && ! file_is_managed "$final_destination"
            printf "%sFile doesn't exist, creating link.\e[0m: %s \n\t%s%s\e[0m\n" \
                "${GREEN}" "$final_destination" "${BLUE}" "$(file "$final_destination")"
            if ! ln -s "$f" "$final_destination"; then
                printf "%sFailed to create symlink for %s: \e[0m: %s" \
                    "${RED}" "$(basename "$f")" "$final_destination"
            else
                MANAGED_FILES+=("$final_destination")
            fi
        fi

    done
done

# Write MANAGED_FILES to a file.
if ! printf "%s\n" "${MANAGED_FILES[@]}" > /tmp/FILES; then
    printf "%sFailed to write to file: %s\n" "${RED}" "/tmp/FILES${RESET}"
fi


