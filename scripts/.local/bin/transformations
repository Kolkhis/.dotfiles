#!/bin/bash
# shellcheck disable=SC2016

cat <<- 'EOC'
Pass arguments to this script to see how they will transform.

Parameter Transformation Operators (on single variables) 
${var@U} - Converts to uppercase.
${var^^} - Converts to uppercase.
${var@u} - Capitalizes the first character.
${var^} - Capitalizes the first character.
${var@L} - Converts to lowercase.
${var,,} - Converts to lowercase.
${var,,} - Converts first character to lowercase.
${var@Q} - Quotes the value, making it safe to reuse as input.
${var@E} - Expands escape sequences (like $'...' syntax).
${var@P} - Expand as a prompt string (PS1).
${var@A} - Returns an assignment statement to recreate the variable with its attributes.
${var@K} - Produces a quoted version of the value, displaying arrays as key-value pairs.
${var@a} - Returns the variable's attribute flags (like readonly, exported).

Using transformations on arrays:
${@^} - Converts the first character of each parameter to uppercase.
${*^} - Converts the first character of the combined string to uppercase
${@^^} - Converts all characters to uppercase, as separate items
${*^^} - Converts all characters to uppercase as one string
${@,} - Lowercases the first character of each parameter
${*,} - Lowercases only the first character of the combined string
Using the letters (requires the @):
${@@Q} - Quotes each parameter individually
${*@Q} - Quotes the entire combined string
${@@A} - Returns an assignment statement to recreate the array.
${*@A} - Returns an assignment statement to recreate the string.

tl;dr: @ applies to each individually, * combines and applies to the combined string.
[@] and [*] will use values only in dictionaries. Use ${!arr[@|*]} to use keys.
EOC


[[ -z $1 ]] && exit 0 || arg=$1

printf 'all_args_lower=("${@@L}") # Will return an array'

printf '${arg@L} - lowercase: %s\n' "${arg@L}"
printf '${arg@Q} - quoted: %s\n' "${arg@Q}"
printf '${arg@K} - quoted, key/value: %s\n' "${arg@K}"
printf '${arg@a} - attributes: %s\n' "${arg@a}"
printf '${arg@u} - TitleCase: %s\n' "${arg@u}"
printf '${arg@U} - Uppercase: %s\n' "${arg@U}"
printf '${@^} - Capitalizes each parameter: %s\n' "${@^}"
printf '${*^} - Capitalizes only the first letter of the combined string: %s\n' "${*^}"
printf '${@^^} - Uppercases each parameter completely: %s\n' "${@^^}"
printf '${*^^} - Uppercases the entire combined string: %s\n' "${*^^}"
printf '${@,} - Lowercases the first character of each parameter: %s\n' "${@,}"
printf '${*,} - Lowercases only the first character of the combined string: %s\n' "${*,}"
printf '${@@Q} - Quotes each parameter individually: %s\n' "${@@Q}"
printf '${*@Q} - Quotes the entire combined string: %s\n' "${*@Q}"
printf '${*@Q} - Quotes the entire combined string: %s\n' "${*@Q}"
printf '${@@A} - Returns an array that contains statements to recreate each variable: %s\n' "${@@A}"
printf '${*@A} - Returns an assignment statement to recreate the variables: %s\n' "${*@A}"



